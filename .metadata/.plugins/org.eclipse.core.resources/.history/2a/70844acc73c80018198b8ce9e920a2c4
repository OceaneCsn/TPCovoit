package CovoitClasses;
import java.util.*;

import jade.core.AID;
import jade.core.Agent;
import jade.core.behaviours.*;
import jade.lang.acl.ACLMessage;
import jade.lang.acl.MessageTemplate;
import jade.domain.DFService;
import jade.domain.FIPAException;
import jade.domain.FIPAAgentManagement.DFAgentDescription;
import jade.domain.FIPAAgentManagement.ServiceDescription;


public class CovoitAgent extends Agent {
	
	//private CovoitGui mygui;
	
	private String startingCity;
	private String targetCity;
	private int leavingTime;
	private int carScore;
	private int nbPlaces;
	private ArrayList<AID> passengers;
	private int price;
	private ArrayList<AID> acquaintances;
	
	
	protected void setup( ) {
		
		startingCity = "Montpellier";
		targetCity = "Lyon";
		leavingTime = 15;
		carScore = 4;
		nbPlaces = 3;
		price = 4; 
		
		// Register the book-selling service in the yellow pages
		DFAgentDescription dfd = new DFAgentDescription();
		dfd.setName(getAID());
		ServiceDescription sd = new ServiceDescription();
		sd.setType(startingCity+";"+targetCity);
		sd.setName("JADE-covoit");
		dfd.addServices(sd);
		try {
			DFService.register(this, dfd);
		}
		catch (FIPAException fe) {
			fe.printStackTrace();
		}
		
		addBehaviour(new NegociationDriver());

	}
	
	private class NegociationDriver extends CyclicBehaviour {
		
		private MessageTemplate mt;
		
		public void action(){
			DFAgentDescription template = new DFAgentDescription();
			ServiceDescription sd = new ServiceDescription();
			sd.setType(startingCity+";"+targetCity);
			template.addServices(sd);
			try {
				DFAgentDescription[] result = DFService.search(myAgent, template); 
				System.out.println("Found the following seller agents:");
				acquaintances = new ArrayList(result.length);
				for (int i = 0; i < result.length; ++i) {
					acquaintances.add(result[i].getName());
					System.out.println(result[i].getName());
				}
				acquaintances.remove(getAID());
			}
			catch (FIPAException fe) {
				fe.printStackTrace();
			}
			
			//envoi aux premier passager potentiel
			ACLMessage cfp = new ACLMessage(ACLMessage.CFP);
			for (int i = 0; i < acquaintances.size(); ++i) {
				cfp.addReceiver(acquaintances.get(i));
			} 
			cfp.setContent(String.valueOf(price));
			cfp.setConversationId("covoit");
			cfp.setReplyWith("cfp"+System.currentTimeMillis()); // Unique value
			myAgent.send(cfp);
			// Prepare the template to get proposals
			mt = MessageTemplate.and(MessageTemplate.MatchConversationId("book-trade"), MessageTemplate.MatchInReplyTo(cfp.getReplyWith()));
			
			ACLMessage reply = myAgent.receive(mt);
			if(reply != null) {
				if(reply.getPerformative()== ACLMessage.PROPOSE) {
					passengers.add(reply.getSender());
					nbPlaces --;
					if(nbPlaces == 0){
						doDelete();
					}
					ACLMessage confirm = new ACLMessage(ACLMessage.ACCEPT_PROPOSAL);
					confirm.addReceiver(reply.getSender());
					confirm.setContent(String.valueOf(price));
					confirm.setConversationId("covoit");
					myAgent.send(confirm);
				}
			}
			
		}
	}
	
	private class NegociationPassenger extends CyclicBehaviour {
		
		public void action(){
		
			if(passengers.size() == 0) {
				
			}
			
			
			
		}
		
	}
	
	

}
